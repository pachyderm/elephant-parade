// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Person {
  id               String             @id @default(uuid()) @map("_id")
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  reportedIssues   Issue[]            @relation(name: "ReportedIssues")
  assignedIssues   Issue[]            @relation(name: "AssignedIssues")
  Project          Project[]
  email            String?
  company          Company?           @relation(fields: [companyId], references: [id])
  companyId        String?
  AccountExecutive AccountExecutive[]
  CustomerEngineer CustomerEngineer[]
}

enum IssueStatus {
  TO_DO
  BLOCKED
  DONE
  DEFERRED
  WONT_DO
  IN_REVIEW
  IN_PROGRESS
  NEEDS_CUSTOMER_INFO
  DUPLICATE
}

enum IssueType {
  BUG
  EPIC
  TASK
  SUB_TASK
  STORY
  SPIKE
  CUSTOMER_ESCALATION
}

model Issue {
  id             String              @id @default(uuid()) @map("_id")
  name           String
  description    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  uri            String
  project        Project?            @relation(fields: [projectId], references: [id])
  projectId      String?
  /// status is one of "TO_DO", "BLOCKED", "DONE", "DEFERRED", "WONT_DO", "IN_REVIEW", "IN_PROGRESS", "NEEDS_CUSTOMER_INFO", "DUPLICATE"
  status         IssueStatus         @default(TO_DO)
  /// type is one of "BUG", "EPIC", "TASK", "SUB_TASK", "STORY", "SPIKE", "CUSTOMER_ESCALATION"
  type           IssueType           @default(BUG)
  children       IssueLink[]         @relation(name: "ChildrenIssues")
  parents        IssueLink[]         @relation(name: "ParentIssues")
  reporter       Person?             @relation(name: "ReportedIssues", fields: [reporterId], references: [id])
  reporterId     String?
  assignee       Person?             @relation(name: "AssignedIssues", fields: [assigneeId], references: [id])
  assigneeId     String?
  customerIssues CustomerIssueLink[] @relation(name: "CustomerIssueLinks")
  Release        Release?            @relation(fields: [releaseId], references: [id])
  releaseId      String?
}

model CustomerIssueLink {
  id         String    @id @default(uuid()) @map("_id")
  issue      Issue     @relation(name: "CustomerIssueLinks", fields: [issueId], references: [id])
  issueId    String
  customer   Customer? @relation(name: "LinkCustomerIssues", fields: [customerId], references: [id])
  customerId String?
}

enum IssueLinkType {
  STORY
  BLOCKS
  SUB_TASK
}

/// IssueLink is defined by the relationship from Child to Parent
model IssueLink {
  id       String        @id @default(uuid()) @map("_id")
  /// type is one of "STORY", "BLOCKS", "SUB_TASK"
  type     IssueLinkType @default(STORY)
  parent   Issue         @relation(name: "ParentIssues", fields: [parentId], references: [id])
  parentId String
  child    Issue?        @relation(name: "ChildrenIssues", fields: [childId], references: [id])
  childId  String?
}

enum ReleaseType {
  MAJOR
  MINOR
  MAINTAINENCE
}

enum ReleaseStatus {
  ALPHA
  BETA
  RC
  GA
  EOL
  CUSTOM
}

model Release {
  id        String        @id @default(uuid()) @map("_id")
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  uri       String
  /// type is one of "MAJOR", "MINOR", "MAINTAINENCE"
  type      ReleaseType   @default(MAINTAINENCE)
  /// status is one of "ALPHA", "BETA", "RC", "GA", "EOL", "CUSTOM"
  status    ReleaseStatus @default(GA)
  project   Project       @relation(name: "Releases", fields: [projectId], references: [id])
  projectId String
  issues    Issue[]
}

model Project {
  /// internal project id
  id          String    @id @default(uuid()) @map("_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  /// unique JIRA Project Key
  projectKey  String    @unique
  uri         String
  releases    Release[] @relation(name: "Releases")
  issues      Issue[]
  lead        Person    @relation(fields: [leadId], references: [id])
  leadId      String
}

model Company {
  id          String    @id @default(uuid()) @map("_id")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  employees   Person[]
  Customer    Customer?
}

model AccountExecutive {
  id        String     @id @default(uuid()) @map("_id")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  self      Person     @relation(fields: [personId], references: [id])
  customers Customer[]
  personId  String     @unique
}

model CustomerEngineer {
  id        String     @id @default(uuid()) @map("_id")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  self      Person     @relation(fields: [personId], references: [id])
  customers Customer[]
  personId  String     @unique
}

model Customer {
  id                 String              @id @default(uuid()) @map("_id") @db.ObjectId
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  company            Company             @relation(fields: [companyId], references: [id])
  companyId          String              @unique
  customerIssues     CustomerIssueLink[] @relation(name: "LinkCustomerIssues")
  accountExecutive   AccountExecutive    @relation(fields: [accountExecutiveId], references: [id])
  accountExecutiveId String
  customerEngineer   CustomerEngineer    @relation(fields: [customerEngineerId], references: [id])
  customerSince      DateTime            @default(now())
  nextRenewalDate    DateTime            @default(now())
  arr                Float
  customerEngineerId String
}
